
集成控制面板的对外接口
    1、USART_1（PA9、PA10）115200 8-N-1
        串口调试输出，重定向printf输出语句
        利用开发板自带的CH340，USB连接电脑使用
        
    2、USART_3（部分重映射PC10、PC11）115200 8-E-1
        与ESP8266 WIFI模块通信,偶校验保证通信正确
        注意：ESP8266需要稳定的3.3v电源，最好独立稳压供电！！！
        PC10 TX   <--->     ESP8266 RX
        PC11 RX   <--->     ESP8266 TX
        
    3、SPI_2（PA4/5/6/7、PC4）
        与RC522射频模块通信
        PA4 CS    <--->     RC522   SDA
        PA5 SCK   <--->     RC522   SCK
        PA6 MISO  <--->     RC522   MOSI
        PA7 MOSI  <--->     RC522   MISO
        PC4 RST   <--->     RC522   RST

    4、GPIO PD.12    蜂鸣器
        蜂鸣器低电平有效
        电源3.3/5v都可以，但最好选择3.3v的，5v时，蜂鸣器太响了，建议调试的时候，将蜂鸣器堵住
    
    5、GPIO PA.8     ESP8266的CH_PD引脚
        控制ESP8266的开启、关闭，能够实现复位的功能
        实际上没有使用，复位时，需要重新连接WIFI、MQTT，需要的时间太长了
        建议：
            ESP8266的电源由独立的自锁开关控制
            CH_PD由轻触开关控制（默认高电平），形成物理上的复位功能
            GPIO16由STM32控制，形成软件控制的复位
            另外，使用空闲的GPIO2，自定义串口的流控制，保证数据不会发生错位
            

bsp.c   初始化各种设备
    系统原有的文件，主要看BSP_Init函数
        1、宏：APP_EEPROM_INIT
            手动设置设置默认密码1234、RFID卡序列号0x8f873829和0xffffbb29到EEPROM中
            每次启动读取EEPROM中的数据，根据前4Byte的CRC判断数据的有效性
            当校验不正确时，使用默认配置重新写入
            
        2、宏：TOUCH_ADJUST
            手动触发：复位后调用触摸屏校准函数
        
app.c   系统启动后，创建的第一个任务AppTaskStart
    系统原有的文件，主要看AppTaskStart函数
        1、创建各个任务
            AppTaskRtc：         实时时钟任务，主要是状态栏显示
            AppTaskCore：        控制界面，系统的核心任务
            AppTaskCanMaster：   主机服务，设备列表更新、从机控制、转发更新报文等
            AppTaskEsp8266：     接收来自服务端的控制型报文
        2、令LED每秒改变一个工作状态
            通过与状态栏RTC时钟的变化做对比，监控系统的正常运行
    
app_rtc.c   实时时钟任务AppTaskRtc
    创建的任务文件
        1、接收"RTC秒中断"发出的任务信号量
        2、获取RTC时钟
        3、更新状态栏显示，包括：RTC时钟、主机/从机状态
    
app_init.c  初始化结构体
    创建的API函数文件
        1、开机读取EEPROM中的配置信息，保存到tAppEepromInit sAppEepromInit静态变量中，通过API函数提供给其他模块
        2、提供的API函数，包括：EEPROM的读写、屏幕校准参数的读写、密码设置、RFID序列号设置等
        
        //电阻触控屏的校准参数
        typedef struct
        {
            int32_t	    TouchXfac;      //x校准参数
            int32_t	    TouchYfac;      //y校准参数
            int16_t	    TouchXoff;      //x偏移量
            int16_t 	TouchYoff;      //y偏移量
            uint8_t     TouchStatus;    //校准标志  0x0A
            uint8_t     TouchType;      //屏幕类型
            uint8_t     Reserved[2];    //保留
        } tTouchAdjust;
        
        //EEPROM中配置信息的存放方式
        typedef struct
        {
            uint32_t				Crc32;          //用于校验配置信息的有效性
            uint16_t				Passwd;         //身份认证密码
            uint8_t					RfidNum;		//0-10	10:满	现有的ID数	
            uint8_t					CanFilterNum;	//0-14	14:满	现有的Filter数
            tTouchAdjust			TouchAdjust;
            uint32_t				RfidID[9];					//RfidNum指向空的位置
            CAN_FilterInitTypeDef	CAN_FilterInitStruct[14];	//CanFilterNum指向空的位置
        } tAppEepromInit;
        
        注意：
            （1）、为了节约crc校验的时间，配置信息的Crc32使用stm32的硬件crc进行计算
                stm32硬件crc的计算方式与x86软件crc的计算方式有所不同，出现不一致的结果请不要奇怪。（详情看芯片手册）
            （2）、为了简化开发周期，配置信息中的CAN_FilterInitStruct并没有使用。（app_can_filter.c是其配置内容）
            原因:
                CAN总线的过滤器设置过程中，出现意料之外的混乱，过滤器并不能过滤出我想要的报文优先级；似乎设置过滤器是默认开启的？？

app_core.c  集成控制面板的核心任务
    1、提供包括：控制界面、身份认证、控制设备控制功能
    2、通过mode的值，控制任务的运行；同时mode也是各种报文的一部分
    3、编写这部分代码的时候，使用的是bsp自带的一些函数实现的，比较麻烦，也不容易扩展更多的功能；
    4、状态栏的每秒刷新一次，状态栏以外的只有触摸控制时刷新一次；
        以后，可以使用emwin等gui工具制作控制界面；
        控制界面需要大量的内存，简单的界面还好；复杂的界面可能要用F429，加装SDRAM）
    5、进入控制设备界面的时候，并不是所有的数据都会实时更新。
        只有数据一、数据二是实时更新的，以后可以加上其他的内容更新
    
app_can_tx.c    主机服务
    1、集成控制面板的主机服务
        包含：主机心跳、主机校时、从机控制转发、更新转发
    2、主机心跳主要用于主机竞争，实现多个集成控制面板之间的故障转移
    3、主机校时只要用于LSE和LSI之间的计时误差；
        批量生产的时候，并不能确保32.768KHz晶振完好
    4、同一个CAN总线网络中，同一时间只能有一个集成控制面板主机，从机的控制型报文通过主机进行转发控制；
    5、控制设备的更新型报文，每个面板都会接收并更新其列表数据，但只通过主机装发到服务器端；
    6、处于时间的考虑，主机心跳（主机竞争）的代码并没有实际测试，买了两个面板，只有一个面板的LSE能用；
        时间问题，主机校时部分的代码还没有编写
        从机的RTC任务并没有创建，避免获取RTC时钟的时候陷入死循环；

app_esp8266.c   esp8266转发任务
    1、接收来自esp8266的报文，转化为CAN总线报文发送出去；
        联调的时候，出现与服务端大小端不匹配的现象（stm32和esp8266都是小端，服务器端是大端）。由于当时串口转TTL不在手上，大小端的转换放在了stm32中
    建议：
        大端模式、小端模式的转换应该放在esp8266模块上（esp8266的任务就是：mqtt报文与tMsg报文的转换，自然包括了大小端转换）
            typedef struct
            {
                struct
                {
                    uint8_t		Mode;					//使用0-255，与系统Mode通用
                    union
                    {
                        uint8_t		Control;			//按位，表示8种不同的控制内容，决定Control的使用
                        uint8_t		Update;				//按位，表示8种不同的更新内容，决定Update的使用
                    };
                    union
                    {
                        uint8_t		Control_Byte[2];
                        uint16_t	Control_HalfWord;
                    };
                };
                union
                {
                    uint8_t		Update_Byte[4];
                    uint16_t	Update_HalfWord[2];
                    uint32_t	Update_FullWord;
                    uint32_t	PriorityID;
                };
            } tMsg;
    2、与esp8266通信的格式：
        10字节固定长度，EF开头，FE结尾，中间是tMsg报文
        EF mode control data0 data1 PriorityID FE
        其中，除了PriorityID是4字节，其余都为1字节
    3、串口通信的时候，可能存在错位的现象，导致不能正常的解析报文；
        若收到异常的报文，重启esp8266模块（之前有这部分的代码，效果并不好，esp8266重启需要重新连接wifi和mqtt）
        之后可以选择使用esp8266空闲的GPIO2自定义流控制，当gpio为低电平的时候，两边都把串口缓冲区清空（TX、RX）
    4、esp8266中，CH_PD控制启动关闭、GPIO16控制复位
        代码中，使用CH_PD作为复位引脚（实际没用上），之后可以改为GPIO16
    
